int unloaded = 0;
int display_width = -1;
int display_height = -1;
int dance = 0;
int saved_dance = 0;
int maxscope = 0;
int stayontop = 0;
array isdragging;
array surface_width;
array surface_height;
array ismouseleft;
double CHECK_MOUSE_INTERVAL = 0.125;
int THRESHOLD_DISTANCE = 300;

load()
{
	_saoriload("saori\HandUtil\HandUtil.dll", "HandUtil");
	maxscope = count_scope();
	for (int i = 0; i <= maxscope; i++)
	{
		isdragging += 0;
		surface_width += -1;
		surface_height += -1;
		ismouseleft += 0;
	}
	_create_thread("TH_CheckMouse");
}
unload()
{
	_saoriunload("HandUtil");
	unloaded = 1;
}

int count_scope()
{
	int r = 0;
	string path = "..\..\shell\master";
	dict d = _fenum(path);
	array folders = d["folder"];
	int i = 0;
	while(1)
	{
		i++;
		string folder = fill2(i);
		if (ASEARCH(folder, folders) >= 0)
			r = i;
		else
			break;
	}
	return r;
}
string fill2(int n)
{
	if (n < 10)
		return "0" + n;
	else
		return "" + n;
}
int ASEARCH(string key, array ary)
{
	for (int i = 0; ary[i] != nil; i++)
	{
		if (key == ary[i])
			return i;
	}
	return -1;
}

OnDisplayChange(dict ref)
{
	display_width = ref["Reference1"];
	display_height = ref["Reference2"];
}

string OnFirstBoot()          { return show_scope_all() + "\e"; }
string OnBoot()               { return show_scope_all() + "\e"; }
string OnGhostChanged()       { return show_scope_all() + "\e"; }
string OnShellChanged()       { return show_scope_all() + "\e"; }
string OnWindowStateRestore() { return show_scope_all() + "\e"; }
string OnSurfaceRestore()     { return ""; }
string OnClose()
{
	dance = 0;
	unloaded = 1;
	return "\_w[1000]\-\e";
}
string show_scope_all()
{
	dance = 1;
	string s;
	for (int i = 0; i <= maxscope; i++)
	{
		s += "\p[" + i + "]\s[" + (10 * i) + "]";
	}
	return s;
}

string OnUpdateBegin()
{
	saved_dance = dance;
	dance = 0;
	return show_info("Network Update", "Update Begin.") + "\e";
}
string OnUpdateReady()
{
	return show_info("Network Update", "Updating...") + "\e";
}
string OnUpdateComplete(dict ref)
{
	string reason = ref["Reference0"];
	string s;
	if (reason == "none")
		dance = saved_dance;
	else if (reason == "changed")
		s += show_scope_all();
	s += show_info("Network Update", reason) + "\e";
	return s;
}
string OnUpdateFailure(dict ref)
{
	string reason = ref["Reference0"];
	dance = saved_dance;
	return show_info("Network Update", reason) + "\e";
}
string show_info(string title, string text)
{
	string icon = "info";
	return "\![set,trayballoon,--icon=" + icon + ",--title=" + title + ",--text=" + text + "]";
}

string OnMouseDoubleClick(dict ref)
{
	dance = !dance;
	string s;
	for (int i = 0; i <= maxscope; i++)
	{
		s += "\p[" + i + "]\i[" + dance + "]";
	}
	return s + "\e";
}
string OnMouseDragStart(dict ref)
{
	int scope = ref["Reference3"];
	isdragging[scope] = 1;
	return "\p[" + scope + "]\![set,alignmenttodesktop,free]\![set,scaling,,-100]\e";
}
string OnMouseDragEnd(dict ref)
{
	int scope = ref["Reference3"];
	dict d = _mousepos();
	int my = d["y"];
	int is_too_high = 0;
	if (my * 8 < display_height)
		is_too_high = 1;
	string s = "\p[" + scope + "]";
	s += "\![move,--Y=" + (display_height - surface_height[scope]) + ",--time=" + (1000 * CHECK_MOUSE_INTERVAL) + "]";
	if (is_too_high)
	{
		dance = 0;
		unloaded = 1;
		s += "\i[0]\_w[1000]";
		if (maxscope == 0)
		{
			s += "\![vanishbymyself]";
		}
		else
		{
			delete_scope(scope);
			s += "\![change,ghost," + _systemdict["OnNotifySelfInfo"]["Reference1"] + "]";
		}
	}
	else
	{
		s += "\![set,alignmenttodesktop,default]\![set,scaling,,100]";
		s += "\![notify,OnPartyParrotSetDragging," + scope + ",0]";
	}
	return s + "\e";
}
OnPartyParrotSetDragging(dict ref)
{
	int scope = ref["Reference0"];
	int n = ref["Reference1"];
	isdragging[scope] = n;
}

string OnSecondChange(dict ref)
{
	if (!dance)
		return "";
	return dance_icon() + "\e";
}
string dance_icon()
{
	string s = "";
	for (int i = 0; i < 10; i++)
	{
		s += "\![set,tasktrayicon,icon/parrot" + i + ".ico]";
		if (i < 9)
			s += "\_w[50]";
	}
	s += "\_w[50]" + s;
	return s;
}

TH_CheckMouse()
{
	while(1)
	{
		if (unloaded)
			break;
		string s = run_away_all();
		if (s != "")
			_speak(s);
		_sleep(CHECK_MOUSE_INTERVAL);
	}
}

string run_away_all()
{
	if (!dance)
		return "";
	string s;
	for (int i = 0; i <= maxscope; i++)
	{
		s += run_away(i);
	}
	return s;
}
string run_away(int scope)
{
	if (isdragging[scope])
		return "";
	if (display_width <= 0)
		return "";
	if (surface_width[scope] <= 0 || surface_height[scope] <= 0)
	{
		array asize = get_surface_size(scope);
		surface_width[scope] = asize[0];
		surface_height[scope] = asize[1];
	}
	if (surface_width[scope] <= 0 || surface_height[scope] <= 0)
		return "";
	dict d = _mousepos();
	int mx = d["x"];
	int my = d["y"];
	array a = get_position(scope);
	int px = a[0];
	int py = a[1] - (surface_height[scope] / 2);
	int r = _sqrt(_pow(mx - px, 2) + _pow(my - py, 2));
	int l = THRESHOLD_DISTANCE;
	int diffx = _sqrt(_pow(l, 2) - _pow(my - py, 2));
	int nx;
	if (px < mx)
		nx = px - diffx;
	else
		nx = px + diffx;
	int max = display_width - (surface_width[scope] / 2);
	if (nx > max)
		nx = max;
	else if (nx < surface_width[scope] / 2)
		nx = surface_width[scope] / 2;
	string s;
	if (mx < px && !ismouseleft[scope])
	{
		ismouseleft[scope] = 1;
		s += "\![set,scaling,-100,]";
	}
	else if (px <= mx && ismouseleft[scope])
	{
		ismouseleft[scope] = 0;
		s += "\![set,scaling,100,]";
	}
	if (r < l && nx != px)
		s += "\![move,--X=" + (nx - (surface_width[scope] / 2)) + ",--time=" + (1000 * CHECK_MOUSE_INTERVAL) + "]";
	if (s != "")
		s = "\p[" + scope + "]" + s;
	return s;
}

array get_position(int scope)
{
	array r = get_rect(scope);
	int x = (r[0] + r[2]) / 2;
	int y = r[3];
	return {x, y};
}

array get_surface_size(int scope)
{
	array r = get_rect(scope);
	int lx = r[2] - r[0];
	int ly = r[3] - r[1];
	return {lx, ly};
}

array get_rect(int scope)
{
	string hwnd = _strsplit(_systemdict["hwnd"]["Reference0"], _bytechar(1))[0];
	string sender = _systemdict["OnNotifySelfInfo"]["Reference1"];
	array a = {"HandUtil", "DSSTPSend", hwnd, "result"
		,"EXECUTE SSTP/1.1"
		,"Charset: Shift_JIS"
		,"Sender: " + sender
		,"Command: GetProperty[currentghost.scope(" + scope + ").rect]"};
	dict d = _saorirequest(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
	array r = _strsplit(d["Value1"], ",");
	return {(int)r[0], (int)r[1], (int)r[2], (int)r[3]};
}

string OnInstallBegin(dict ref)
{
	saved_dance = dance;
	dance = 0;
}
string OnInstallFailure(dict ref)
{
	dance = saved_dance;
}
string OnInstallComplete(dict ref)
{
	if (ref["Reference0"] == "supplement")
	{
		int scope = maxscope + 1;
		if (move_images(scope))
		{
			unloaded = 1;
			make_surfaces_txt(scope);
			return "\_w[1000]\![change,ghost," + _systemdict["OnNotifySelfInfo"]["Reference1"] + "]\e";
		}
	}
	dance = saved_dance;
}
int move_images(int scope)
{
	string basepath = "..\..\\";
	string directory = basepath + "shell\master\\" + fill2(scope);
	_dcreate(directory);
	dict d = _fenum(basepath);
	array files = d["file"];
	int count = 0;
	for (int i = 0; files[i] != nil; i++)
	{
		if (_regex_match(files[i], "^\d+\.png$"))
		{
			string path_from = basepath + files[i];
			string path_to = directory + "\\" + files[i];
			_fmove(path_from, path_to);
			count++;
		}
	}
	if (count < 10)
	{
		_ddelete(directory);
		return 0;
	}
	return 1;
}
make_surfaces_txt(int scope)
{
	string ns = fill2(scope);
	string path = "..\..\shell\master\surfaces" + ns + ".txt";
	string sep = _bytechar(1);
	string text = ""
		+ "charset,UTF-8" + sep
		+ "" + sep
		+ "descript" + sep
		+ "{" + sep
		+ "version,1" + sep
		+ "}" + sep
		+ "" + sep
		+ "surface" + (10 * scope) + sep
		+ "{" + sep
		+ "element0,base," + ns + "/0.png,0,0" + sep
		+ "" + sep
		+ "animation0.interval,never" + sep
		+ "animation0.pattern0,stop,2" + sep
		+ "" + sep
		+ "animation1.interval,never" + sep
		+ "animation1.pattern0,start,2" + sep
		+ "" + sep
		+ "animation2.interval,always" + sep;
	for (int i = 0; i < 9; i++)
	{
		text += "animation2.pattern" + i + ",replace,1" + ns + fill2(i + 1) + ",50,0,0" + sep;
	}
	text += "animation2.pattern9,replace," + (10 * scope) + ",50,0,0" + sep
		+ "}" + sep
		+ "" + sep;
	for (int i = 0; i < 9; i++)
	{
		text += "surface1" + ns + fill2(i + 1) + sep
			+ "{" + sep
			+ "element0,base," + ns + "/" + (i + 1) + ".png,0,0" + sep
			+ "}" + sep;
	}
	array atext = _strsplit(text, sep);
	_writetext(path, atext, "utf8");
}

delete_scope(int scope)
{
	string basepath = "..\..\shell\master\\";
	string directory = basepath + fill2(scope);
	_ddelete(directory);
	for (int i = scope; i < maxscope; i++)
	{
		string path_from = basepath + fill2(i + 1);
		string path_to = basepath + fill2(i);
		_fmove(path_from, path_to);
	}

	string file = basepath + "surfaces" + fill2(maxscope) + ".txt";
	_fdelete(file);
}

string OnKeyPress(dict ref)
{
	return _fncstr("key_" + ref["Reference0"], ref);
}
string key_t(dict ref)
{
	stayontop = !stayontop;
	string s;
	if (stayontop)
	{
		s += "\![set,windowstate,stayontop]";
		s += show_info("Always on top", "ON");
	}
	else
	{
		s += "\![set,windowstate,!stayontop]";
		s += show_info("Always on top", "OFF");
	}
	s += "\e";
	return s;
}
